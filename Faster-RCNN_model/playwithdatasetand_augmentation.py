# -*- coding: utf-8 -*-
"""divide_and_augmentation_for_egg_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EsRf-ve31vHdaLb3tEcR9oQeo921MycH
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import zipfile
import cv2
from skimage import exposure
from skimage import transform
from cv2 import resize
from skimage.exposure import rescale_intensity
from skimage.segmentation import slic
from skimage.util import img_as_float
from skimage import io
import tensorflow as tf
from tensorflow.python.keras import Sequential
from tensorflow.keras import layers, optimizers
from tensorflow.keras.applications import DenseNet121
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.layers import *
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.initializers import glorot_uniform
from tensorflow.keras.utils import plot_model
from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, LearningRateScheduler
from IPython.display import display
from tensorflow.keras import backend as K
from sklearn.preprocessing import StandardScaler, normalize
import os
import glob
import random
from google.colab import files 
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
from keras_preprocessing.image import ImageDataGenerator
# %matplotlib inline
from PIL import Image, ImageOps

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/hi

"""# COLOUR INVERTING"""

for i in range(1,230):
  im = Image.open('/content/drive/My Drive/dataset/'+str(i)+'.png').convert('RGB')
  im_invert = ImageOps.invert(im)
 

  im_invert.save('/content/drive/My Drive/dataset_inverted/'+str(i)+'.png')

for i in range(2728,2789):
  im = Image.open('/content/drive/My Drive/last_dataset/IMG_'+str(i)+'.JPG').convert('RGB')
  im_invert = ImageOps.invert(im)

  im_invert.save('/content/drive/My Drive/the_latest_dataset/'+str(i)+'.png')

"""# CHANGE GRAY SCALE

"""

img = cv2.imread('IMG_2746.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img2 = np.zeros_like(img)
img2[:,:,0] = gray
img2[:,:,1] = gray
img2[:,:,2] = gray
cv2.imwrite('/content/drive/My Drive/test_images/t.png', img2)

"""# CHECK IMAGE SHAPE"""

for i in range(3387,3415):
  img = cv2.imread('/content/drive/My Drive/main_test_images/IMG_'+str(i)+'.JPG')
  y=img.shape
  print(y)

"""# IMAGE SLICE INTO 6 PARTS"""

!pip install image_slicer

import image_slicer
for i in range(3387,3415):
  tiles=image_slicer.slice('/content/drive/My Drive/last_dataset/IMG_'+str(i)+'.JPG', 6)
  image_slicer.save_tiles(tiles, directory='/content/drive/My Drive/the_latest_dataset/', \
                            prefix='slc_'+str(i)+'', format='png')

im1,im2,im3,im4,im5.im6 = tiles

"""# list"""

from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir("/content/drive/My Drive/resize") if isfile(join("/content/drive/My Drive/resize", f))]
onlyfiles

import image_slicer
for i in onlyfiles:
  tiles=image_slicer.slice('/content/drive/My Drive/hi/' + i, 15)
  image_slicer.save_tiles(tiles, directory='/content/drive/My Drive/hi/', \
                            prefix='slc_'+i+'', format='png')

import image_slicer

tiles=image_slicer.slice('/content/drive/My Drive/hi/1.png', 8)
image_slicer.save_tiles(tiles, directory='/content/drive/My Drive/hi/', \
                          prefix='slc_'+str(1)+'', format='png')

"""# resize image"""

!pip install Pillow

from PIL import Image
for i in onlyfiles:
  image = Image.open('/content/drive/My Drive/resize/'+ i)
  new_image = image.resize((1024, 1024))
  new_image.save('/content/drive/My Drive/resize_1/'+str(i)+'.png')

"""# Augmentation datasets"""

# load image
img = cv2.imread('/content/drive/My Drive/eggs_files/1.png')
##########################################
#          vertical devide image         #
##########################################
# start vertical devide image
height = img.shape[0]
width = img.shape[1]
# Cut the image in half
width_cutoff = width // 3
left1 = img[:, :width_cutoff]
middle1 = img[:, :width_cutoff:]
right1 = img[:, width_cutoff:]
cv2.imwrite("1_1.png",left1)
cv2.imwrite("1_2.png",middle1)
cv2.imwrite("1_3.png",right1)
# finish vertical devide image'''

img = cv2.imread('/content/drive/My Drive/test_images/t.png')
for i in range(1386):
  for j in range(1987):
  print(img[i][j])

im = cv2.imread('/content/drive/My Drive/test_images/1.png')
unique, counts = np.unique(im, return_counts=True)
a_dictionary = dict(zip(unique, counts))
max_key = max(a_dictionary, key=a_dictionary.get)

max_key

red_image = PIL.Image.open("/content/drive/My Drive/test_images/1.png")

red_image_rgb = red_image.convert("RGB")
rgb_pixel_value = red_image_rgb.getpixel((1,1))
rgb_pixel_value

import cv2

image = cv2.imread('1_1.png')
invert = cv2.bitwise_not(image)
cv2.imwrite('/content/drive/My Drive/test_images/invert.png', img2)

'''# load image
img = cv2.imread('/content/drive/My Drive/eggs_files/1.png')
##########################################
#          vertical devide image         #
##########################################
# start vertical devide image
height = img.shape[0]
width = img.shape[1]
# Cut the image in half
width_cutoff = width // 3
left1 = img[:, :width_cutoff]
middle1 = img[:, :width_cutoff:]
right1 = img[:, width_cutoff:]
cv2.imwrite("1_1.png",left1)
cv2.imwrite("1_2.png",middle1)
cv2.imwrite("1_3.png",right1)
# finish vertical devide image'''

# load image
for i in range(1,14):
  img = cv2.imread(str(i)+'_mask.png')
  img1 = cv2.imread(str(i)+'.png')
  ##########################################
  #          vertical devide image         #
  ##########################################
  #mask
  # start vertical devide image
  height = img.shape[0]
  width = img.shape[1]
  # Cut the image in half
  width_cutoff = width // 2
  left1 = img[:, :width_cutoff]
  right1 = img[:, width_cutoff:]
  cv2.imwrite(str(i)+"_"+str(1)+"_mask.png",left1)
  cv2.imwrite(str(i)+"_"+str(2)+"_mask.png",right1)
  # finish vertical devide image
  #image
  height1 = img1.shape[0]
  width1 = img1.shape[1]
  # Cut the image in half
  width_cutoff1 = width1 // 2
  left2 = img1[:, :width_cutoff1]
  right2 = img1[:, width_cutoff1:]
  cv2.imwrite(str(i)+"_"+str(1)+".png",left2)
  cv2.imwrite(str(i)+"_"+str(2)+".png",right2)

import cv2
import numpy as np
for i in onlyfiles:

  img = cv2.imread("/content/drive/My Drive/images_annotated/"+i+".png")
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  cv2.imwrite('/content/drive/My Drive/eggs_files/'+str(i)+'_1_mask.png', gray)

import cv2
import numpy as np
for i in range(1,14):

  img = cv2.imread(str(i)+'_mask.png')
  img1 = cv2.imread(str(i)+'.png')
  print(type(img))
  # <class 'numpy.ndarray'>

  print(img.shape)
  # (225, 400, 3)

  #rotate
  img_rotate_90_clockwise = cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)
  img1_rotate_90_clockwise = cv2.rotate(img1, cv2.ROTATE_90_CLOCKWISE)

  #flip
  img_flip_ud = cv2.flip(img, 0)
  img1_flip_ud = cv2.flip(img1, 0)

  img_flip_lr = cv2.flip(img, 1)
  img1_flip_lr = cv2.flip(img1, 1)

  img_flip_ud_lr = cv2.flip(img, -1)
  img1_flip_ud_lr = cv2.flip(img1, -1)

  #save
  cv2.imwrite('/content/drive/My Drive/new_eggs_files/'+str(i)+'_rotate_mask.png', img_rotate_90_clockwise)
  cv2.imwrite('/content/drive/My Drive/new_eggs_files/'+str(i)+'_rotate_.png', img1_rotate_90_clockwise)

  cv2.imwrite('/content/drive/My Drive/new_eggs_files/'+str(i)+'_flip_ud_mask.png', img_flip_ud)
  cv2.imwrite('/content/drive/My Drive/new_eggs_files/'+str(i)+'_flip_ud_.png', img1_flip_ud)

  cv2.imwrite('/content/drive/My Drive/new_eggs_files/'+str(i)+'_flip_lr_mask.png', img_flip_lr)
  cv2.imwrite('/content/drive/My Drive/new_eggs_files/'+str(i)+'_flip_lr_.png', img1_flip_lr)

  cv2.imwrite('/content/drive/My Drive/new_eggs_files/'+str(i)+'_flip_ud_lr_mask.png', img_flip_ud_lr)
  cv2.imwrite('/content/drive/My Drive/new_eggs_files/'+str(i)+'_flip_ud_lr_.png', img1_flip_ud_lr)

# load image
for i in range(1,14):
  img = cv2.imread(str(i)+'_mask.png')
  img1 = cv2.imread(str(i)+'.png')


  ##########################################
  #          vertical devide image         #
  ##########################################
  #ORGINAL IMAGE
  #mask
  # start vertical devide image
  height = img.shape[0]
  width = img.shape[1]
  # Cut the image in half
  width_cutoff = width // 2
  left1 = img[:, :width_cutoff]
  right1 = img[:, width_cutoff:]
  cv2.imwrite(str(i)+"_"+str(1)+"_mask.png",left1)
  cv2.imwrite(str(i)+"_"+str(2)+"_mask.png",right1)
  # finish vertical devide image
  #image
  height1 = img1.shape[0]
  width1 = img1.shape[1]
  # Cut the image in half
  width_cutoff1 = width1 // 2
  left2 = img1[:, :width_cutoff1]
  right2 = img1[:, width_cutoff1:]
  cv2.imwrite(str(i)+"_"+str(1)+".png",left2)
  cv2.imwrite(str(i)+"_"+str(2)+".png",right2)

  #ROTATING IMAGE
  img2 = cv2.imread(str(i)+'_rotate_mask.png')
  img3 = cv2.imread(str(i)+'_rotate_.png')
  #mask
  # start vertical devide image
  height2 = img2.shape[0]
  width2 = img2.shape[1]
  # Cut the image in half
  width_cutoff2 = width2 // 2
  left3 = img2[:, :width_cutoff2]
  right3 = img2[:, width_cutoff2:]
  cv2.imwrite(str(i)+"_"+str(1)+"_rotate_mask.png",left3)
  cv2.imwrite(str(i)+"_"+str(2)+"_rotate_mask.png",right3)
  # finish vertical devide image
  #image
  height3 = img3.shape[0]
  width3 = img3.shape[1]
  # Cut the image in half
  width_cutoff3 = width3 // 2
  left4 = img3[:, :width_cutoff3]
  right4 = img3[:, width_cutoff3:]
  cv2.imwrite(str(i)+"_"+str(1)+"_rotate_.png",left4)
  cv2.imwrite(str(i)+"_"+str(2)+"_rotate_.png",right4)

  #FLIPPING IMAGE UD
  img4 = cv2.imread(str(i)+'_flip_ud_mask.png')
  img5 = cv2.imread(str(i)+'_flip_ud_.png')
  #mask
  # start vertical devide image
  height4 = img4.shape[0]
  width4 = img4.shape[1]
  # Cut the image in half
  width_cutoff4 = width4 // 2
  left5 = img4[:, :width_cutoff4]
  right5 = img4[:, width_cutoff4:]
  cv2.imwrite(str(i)+"_"+str(1)+"_flip_ud_mask.png",left5)
  cv2.imwrite(str(i)+"_"+str(2)+"_flip_ud_mask.png",right5)
  # finish vertical devide image
  #image
  height5 = img5.shape[0]
  width5 = img5.shape[1]
  # Cut the image in half
  width_cutoff5 = width5 // 2
  left6 = img5[:, :width_cutoff5]
  right6 = img5[:, width_cutoff5:]
  cv2.imwrite(str(i)+"_"+str(1)+"_flip_ud_.png",left6)
  cv2.imwrite(str(i)+"_"+str(2)+"_flip_ud_.png",right6)

  #FLIPPING IMAGE LR
  img6 = cv2.imread(str(i)+'_flip_lr_mask.png')
  img7 = cv2.imread(str(i)+'_flip_lr_.png')
  #mask
  # start vertical devide image
  height6 = img6.shape[0]
  width6 = img6.shape[1]
  # Cut the image in half
  width_cutoff6 = width6 // 2
  left7 = img6[:, :width_cutoff6]
  right7 = img6[:, width_cutoff6:]
  cv2.imwrite(str(i)+"_"+str(1)+"_flip_lr_mask.png",left7)
  cv2.imwrite(str(i)+"_"+str(2)+"_flip_lr_mask.png",right7)
  # finish vertical devide image
  #image
  height7 = img7.shape[0]
  width7 = img7.shape[1]
  # Cut the image in half
  width_cutoff7 = width7 // 2
  left8 = img7[:, :width_cutoff7]
  right8 = img7[:, width_cutoff7:]
  cv2.imwrite(str(i)+"_"+str(1)+"_flip_lr_.png",left8)
  cv2.imwrite(str(i)+"_"+str(2)+"_flip_lr_.png",right8)

  #FLIPPING IMAGE UD_LR
  img8 = cv2.imread(str(i)+'_flip_ud_lr_mask.png')
  img9 = cv2.imread(str(i)+'_flip_ud_lr_.png')
  #mask
  # start vertical devide image
  height8 = img8.shape[0]
  width8 = img8.shape[1]
  # Cut the image in half
  width_cutoff8 = width8 // 2
  left9 = img8[:, :width_cutoff8]
  right9 = img8[:, width_cutoff8:]
  cv2.imwrite(str(i)+"_"+str(1)+"_flip_ud_lr_mask.png",left9)
  cv2.imwrite(str(i)+"_"+str(2)+"_flip_ud_lr_mask.png",right9)
  # finish vertical devide image
  #image
  height9 = img9.shape[0]
  width9 = img9.shape[1]
  # Cut the image in half
  width_cutoff9 = width9 // 2
  left10 = img9[:, :width_cutoff9]
  right10 = img9[:, width_cutoff9:]
  cv2.imwrite(str(i)+"_"+str(1)+"_flip_ud_lr_.png",left10)
  cv2.imwrite(str(i)+"_"+str(2)+"_flip_ud_lr_.png",right10)